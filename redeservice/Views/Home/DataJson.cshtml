@{
    ViewData["Title"] = "Gerar arquivo JSON";
}

<div class="container mt-5 mx-auto bg-white rounded shadow p-4">
    <h2 class="mb-4">Gerar arquivo JSON</h2>

    <div class="row mb-3 justify-content-end text-end">
        <div class="col mb-3">
            <a class="btn btn-outline-primary btn-block" onclick="generateDataJson()">Criar arquivo data.json</a>
            <a class="btn btn-success btn-block" onclick="loadGrid()">Carregar Grid</a>
        </div>
    </div>

    <div>
        <table class="table table-striped table-responsive">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Descrição</th>
                </tr>
            </thead>
            <tbody id="tableBody">
            </tbody>
        </table>
        <div class="row mt-3 justify-content-center text-center">
            <div class="col-md-2">
                <button class="btn btn-primary btn-block" id="previousPage" onclick="previousPage()">Anterior</button>
            </div>
            <div class="col-md-2">
                <span id="currentPage" class="align-self-center text-center"></span>
            </div>
            <div class="col-md-2">
                <button class="btn btn-primary btn-block ml-auto" id="nextPage" onclick="nextPage()">Próxima</button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentPage = 1;
    const itemsPerPage = 10;
    let data = [];

    function previousPage() {
        if (currentPage > 1) {
            currentPage--;
            updateTable();
        }
    }

    function nextPage() {
        const maxPage = Math.ceil(data.length / itemsPerPage);
        if (currentPage < maxPage) {
            currentPage++;
            updateTable();
        }
    }

    function updateTable() {
        const tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = '';

        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const pageData = data.slice(startIndex, endIndex);

        pageData.forEach(function (item) {
            const row = document.createElement("tr");
            const idCell = document.createElement("td");
            const descriptionCell = document.createElement("td");

            idCell.textContent = item.codigo;
            descriptionCell.textContent = item.descricao;

            row.appendChild(idCell);
            row.appendChild(descriptionCell);

            tableBody.appendChild(row);
        });

        updatePageButtons();

        const currentPageElement = document.getElementById("currentPage");
        currentPageElement.textContent = `${currentPage}`;
    }


    function updatePageButtons() {
        const previousButton = document.getElementById("previousPage");
        const nextButton = document.getElementById("nextPage");
        const maxPage = Math.ceil(data.length / itemsPerPage);

        if (currentPage === 1) {
            previousButton.disabled = true;
        } else {
            previousButton.disabled = false;
        }

        if (currentPage === maxPage) {
            nextButton.disabled = true;
        } else {
            nextButton.disabled = false;
        }
    }

    function generateDataJson() {
        $.ajax({
            type: "GET",
            url: "/Home/generateDataJson",
            success: function (response) {
                toastr.success('Arquivo JSON gerado com sucesso!', 'Sucesso');
            },
            error: function () {
                toastr.error('Erro ao gerar arquivo JSON.', 'Erro');
            }
        });
    }

    function loadGrid() {
        $.ajax({
            type: "GET",
            url: "/Home/getDataJson",
            success: function (response) {
                data = response;
                updateTable();
            },
            error: function () {
                toastr.error('Erro ao carregar arquivo JSON.', 'Erro');
            }
        });
    }
</script>
